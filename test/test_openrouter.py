#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unittest
import os
import sys
import json
from dotenv import load_dotenv
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenRouter
from src.api.openrouter_api import OpenRouterClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º IsolatedAsyncioTestCase –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
class TestOpenRouterAPI(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è API OpenRouter"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.client = OpenRouterClient()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API –∫–ª—é—á
        self.api_key_available = bool(os.getenv("OPENROUTER_API_KEY"))
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.print_documentation_info()
    
    async def asyncTearDown(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        if self.client:
            await self.client.close()

    def print_documentation_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ===")
        print("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è OpenRouter API [@docs:openrouter-api]: https://openrouter.ai/docs")
        print("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram Bot API [@docs:telegram-bot-api]: https://core.telegram.org/bots/api")
        print("================================\n")
    
    async def test_api_key_loaded(self):
        """–¢–µ—Å—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É API –∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        print("–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ OpenRouter")
        self.assertTrue(self.api_key_available, "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞")
        api_key = os.getenv("OPENROUTER_API_KEY")
        self.assertIsNotNone(api_key, "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω")
        self.assertTrue(api_key.startswith("sk-or-"), "API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç 'sk-or-*'")
        print(f"‚úì API –∫–ª—é—á OpenRouter —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {api_key[:10]}...")
    
    async def test_get_available_models(self):
        """–¢–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.api_key_available:
            self.skipTest("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("–¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ asyncio.run()
        models = await self.client.get_available_models(use_cache=False)
        self.assertIsInstance(models, list, "get_available_models –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫")
        self.assertGreater(len(models), 0, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
        model = models[0]
        required_fields = ["id", "name"]
        for field in required_fields:
            self.assertIn(field, model, f"–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '{field}'")
        
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
        print(f"–ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏: {model['name']} ({model['id']})")
    
    async def test_get_free_models(self):
        """–¢–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.api_key_available:
            self.skipTest("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("–¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ asyncio.run()
        free_models = await self.client.get_free_models(limit=10)
        self.assertIsInstance(free_models, list, "get_free_models –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫")
        
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(free_models)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Å "free" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        free_in_name_count = sum(1 for model in free_models if model.get("is_free", False))
        print(f"‚úì –ú–æ–¥–µ–ª–µ–π —Å 'free' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {free_in_name_count}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        print("\n–°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
        for i, model in enumerate(free_models, 1):
            is_free = "üÜì" if model.get("is_free", False) else "  "
            print(f"{i}. {is_free} {model['name']} ({model['id']})")
    
    async def test_generate_response(self):
        """–¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"""
        if not self.api_key_available:
            self.skipTest("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("–¢–µ—Å—Ç: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å await)
        free_models = await self.client.get_free_models(limit=1)
        if not free_models:
            self.skipTest("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
        model = free_models[0]
        print(f"‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model['name']} ({model['id']})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å await)
        prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
        print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: '{prompt}'")
        
        response = await self.client.generate_response(model['id'], prompt)
        
        self.assertIsInstance(response, str, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        self.assertGreater(len(response), 0, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û—Ç–≤–µ—Ç: {response[:100]}...")
    
    async def test_models_cache(self):
        """–¢–µ—Å—Ç –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        if not self.api_key_available:
            self.skipTest("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("–¢–µ—Å—Ç: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        
        cache_file = self.client.models_cache_file
        # –£–¥–∞–ª—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(cache_file):
            os.remove(cache_file)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –∫—ç—à) - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å await
        models = await self.client.get_available_models(use_cache=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à —Å–æ–∑–¥–∞–Ω
        self.assertTrue(os.path.exists(cache_file), "–ö—ç—à-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(cache_file, 'r') as f:
            cached_models = json.load(f)
        
        self.assertEqual(len(cached_models), len(models), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É")
        print(f"‚úì –ö—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å {len(cached_models)} –º–æ–¥–µ–ª—è–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å await
        cached_models_result = await self.client.get_available_models(use_cache=True)
        self.assertEqual(len(cached_models_result), len(models), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –∏–∑ –∫—ç—à–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É")
        print("‚úì –ö—ç—à —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ")


if __name__ == "__main__":
    unittest.main()
